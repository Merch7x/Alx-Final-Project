name: Create Dev Stagging Environment

on:
  workflow_dispatch:
    inputs:
      PR_number:
        description: "Pull request number"
        required: true

jobs:
  Build_Publish:
    name: Push Docker image to Docker Hub, GHCR and ECR
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OICD_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata (tags, labels) for Docker (Docker Hub, GHCR and ECR)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            merch7x/flask-blog
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/flask-blog
          # tags: |
          #   type=semver,pattern={{version}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  create:
    name: "Create stagging and deploying"
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest
    steps:
      - name: Verify Pull Request Number
        uses: actions/github-script@v5
        id: verify_pr_number
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.PR_number }}
            });,

            if (response.data.number !== ${{ github.event.inputs.PR_number }}) {
              throw new Error('Pull request is not open or number is not valid!');
            } else {
              console.log("PR ref: " + response.data.head.ref);
              return response.data.head.ref;
            }

      - name: Checkout infra branch
        uses: actions/checkout@v4
        with:
          ref: infra

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version:
